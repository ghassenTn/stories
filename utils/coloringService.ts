import { Platform } from 'react-native';
import { generateId } from './helpers';
import { ColoringPage, Image } from '@/types';

// This function would normally call an AI service to convert an image to a coloring page outline
// For this demo, we'll simulate it by using a different image URL
export async function generateColoringPage(image: Image, title: string): Promise<ColoringPage> {
  try {
    // In a real app, we would call an AI service to convert the image to a coloring page
    // For this demo, we'll just use the same image URL but pretend it's an outline
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Create a coloring page with the "outline" version
    // In a real app, this would be a black and white outline generated by AI
    const coloringPage: ColoringPage = {
      id: generateId(),
      storyId: image.storyId,
      imageId: image.id,
      title: title,
      outlineUrl: convertToOutlineUrl(image.url),
      originalUrl: image.url,
      createdAt: Date.now(),
    };
    
    return coloringPage;
  } catch (error) {
    console.error('Error generating coloring page:', error);
    throw error;
  }
}

// Helper function to simulate converting a regular image URL to an "outline" version
// In a real app, this would be handled by an AI service
function convertToOutlineUrl(imageUrl: string): string {
  // For demo purposes, we'll use grayscale filter on the same image
  // In a real app, this would be a completely different URL to a black and white outline
  if (imageUrl.includes('unsplash.com')) {
    // Add grayscale filter to Unsplash images
    return `${imageUrl}?q=80&w=800&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&fm=jpg&grayscale=true`;
  }
  
  // For other images, just return the original URL
  return imageUrl;
}

// Function to download a coloring page
export async function downloadColoringPage(coloringPage: ColoringPage): Promise<boolean> {
  try {
    if (Platform.OS === 'web') {
      // For web, create a download link
      const link = document.createElement('a');
      link.href = coloringPage.outlineUrl;
      link.download = `${coloringPage.title.replace(/\s+/g, '_')}.jpg`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      return true;
    } else {
      // For mobile, we would use expo-file-system to download the image
      // But for this demo, we'll just return true
      console.log('Downloading coloring page on mobile is not implemented in this demo');
      return true;
    }
  } catch (error) {
    console.error('Error downloading coloring page:', error);
    return false;
  }
}